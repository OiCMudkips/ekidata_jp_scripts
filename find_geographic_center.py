#!python3
"""This module provides a commandline tool to find the geographic center of
any combination of data.

It takes as input an sqllite database generated by convert_to_sqlite.py.
"""
import argparse
import functools
import sys
import sqlite3

def get_argparser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="Find geographic centers of Japanese railway lines")
    parser.add_argument("sqllite_file", help="input path for sqllite db file")

    cmd_group = parser.add_mutually_exclusive_group()
    cmd_group.add_argument("--line-id", help="line id to filter by")
    cmd_group.add_argument("--company-id", help="company id to filter by")

    parser.add_argument("--prefecture", help="prefecture id to filter by")

    return parser

GET_LINES_BY_COMPANY = "SELECT id FROM lines WHERE company_id=?"

SELECT_STATIONS_BY_LINE_TEMPLATE = "SELECT longitude, latitude FROM stations WHERE line_id IN (%s)"
SELECT_STATIONS_BY_PREFECTURE = "SELECT longitude, latitude FROM stations WHERE prefecture=?"
SELECT_STATIONS_BY_BOTH_TEMPLATE="SELECT longitude, latitude FROM stations WHERE line_id IN (%s) AND prefecture=?"

def run() -> None:
    args = get_argparser().parse_args()

    conn = sqlite3.connect(args.sqllite_file)
    cursor = conn.cursor()

    lines = []
    stations = []

    if args.line_id:
        lines.append(args.line_id)
    elif args.company_id:
        cursor.execute(GET_LINES_BY_COMPANY, args.company_id)
        lines = cursor.fetchall()

    if lines and args.prefecture:
        params = [x for x in lines]
        params.append(args.prefecture)
        cursor.execute(SELECT_STATIONS_BY_BOTH_TEMPLATE % ','.join("?" * len(lines)), params)
    elif lines:
        cursor.execute(SELECT_STATIONS_BY_LINE_TEMPLATE % ','.join("?" * len(lines)), lines)
    elif args.prefecture:
        cursor.execute(SELECT_STATIONS_BY_PREFECTURE, [args.prefecture])
    else:
        raise ValueError("missing filters; at least one filter is required")

    stations = cursor.fetchall()
    if not stations:
        raise ValueError("no stations found")

    total_long, total_lat = functools.reduce(
        lambda sums, station: (sums[0] + station[0], sums[1] + station[1]), stations, (0,0))

    centre = (total_long / len(stations), total_lat / len(stations))
    print(centre)

    conn.close()

if __name__ == "__main__":
    run()
